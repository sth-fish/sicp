{
  "_args": [
    [
      "scheme",
      "/Users/south_fish/Projects/sicp/ch-01"
    ]
  ],
  "_from": "scheme@latest",
  "_id": "scheme@0.0.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/scheme",
  "_npmUser": {
    "email": "thomas@reggi.com",
    "name": "reggi"
  },
  "_npmVersion": "1.1.61",
  "_phantomChildren": {},
  "_requested": {
    "name": "scheme",
    "raw": "scheme",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/scheme/-/scheme-0.0.1.tgz",
  "_shasum": "3cd7759a8c7460348d128ab85b5806094e142395",
  "_shrinkwrap": null,
  "_spec": "scheme",
  "_where": "/Users/south_fish/Projects/sicp/ch-01",
  "author": {
    "email": "thomas@reggi.com",
    "name": "Thomas Reggi",
    "url": "http://reggi.com"
  },
  "bugs": {
    "url": "https://github.com/reggi/schemejs/issues"
  },
  "dependencies": {
    "phpjs": "0.0.1",
    "underscore": "1.4.2"
  },
  "description": "Uniform Resource Identifier Builder",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "3cd7759a8c7460348d128ab85b5806094e142395",
    "tarball": "https://registry.npmjs.org/scheme/-/scheme-0.0.1.tgz"
  },
  "homepage": "https://github.com/reggi/schemejs#readme",
  "keywords": [
    "util",
    "uri",
    "scheme",
    "url"
  ],
  "maintainers": [
    {
      "email": "thomas@reggi.com",
      "name": "reggi"
    }
  ],
  "name": "scheme",
  "optionalDependencies": {},
  "readme": "# SCHEME.js\n\n_[Rick Ross - Stay Schemin](http://www.youtube.com/watch?v=-6ebutx-Fww)_\n\n### Synopsys\n\nThis was created originally to help construct `request` URI's, by building each part of the URI separately I could easily have variables in the URI. This helps for oAuth.\n\n### Build from object / json\n\n\tvar build = scheme.build({\n\t    scheme: 'http',\n\t    host: 'localhost',\n\t    port: '3000',\n\t    path: [ 'application', 'login' ],\n\t    query: { user: 'github' }\n\t});\n\tconsole.log(build);\n\nReturn\n\n\n\thttp://localhost:3000/application/login?user=github\n\n### Synonyms\n\nI realize that a lot of people (including myself) struggle with the names of each piece of a URI, knowing this, I made multiple things map to the same, using synonyms.\n\n\t[\"url\",\"uri\"],\n\t[\"scheme\",\"protocol\"],\n\t[\"username\",\"user\"],\n\t[\"password\",\"pass\"],\n\t[\"domain\",\"host\",\"domains\",\"hostname\"],\n\t[\"port\"],\n\t[\"path\",\"pathname\",\"paths\",\"pathnames\"],\n\t[\"query\",\"parameters\",\"queries\",\"search\"],\n\t[\"hash\",\"fragment\",\"anchor\"]\n\t\nThese only work for the input object, the output object is bound by the [parse_url](http://phpjs.org/functions/parse_url/) function from php.js.\n\n\t[\"scheme\",\"host\",\"user\",\"pass\",\"path\",\"query\",\"fragment\"]\n\t\n### Build from string\n\n\tvar build = scheme.build(\"http://localhost:3000/application/login?user=github\");\n\tconsole.log(build);\t\n\nReturn \n\n\t{\n\t  scheme: 'http',\n\t  host: 'localhost',\n\t  port: '3000',\n\t  path: [\n\t    'application',\n\t    'login'\n\t  ],\n\t  query: {\n\t    user: 'github'\n\t  }\n\t}\n\n### Nesting\n\n\tvar build = scheme.build({\n\t    \"scheme\": \"https://\",\n\t    \"domain\": \"domain.com\",\n\t    \"path\": \"/login\",\n\t    \"query\":{\n\t        \"user\":\"thomasreggi\",\n\t        \"from\":scheme.build({\n\t            \"scheme\": \"https://\",\n\t            \"domain\": \"redirect.com\",\n\t            \"path\": \"/funstuff\",\n\t        }),\n\t    }\n\t});\n\tconsole.log(build);\n\nReturn\n\n\thttps://domain.com/login?user=thomasreggi&from=https%3A%2F%2Fredirect.com%2Ffunstuff\n\n### Origin\n\n* [stackoverflow.com - 13498417](http://stackoverflow.com/questions/13498417/build-urls-from-json)\n* [stackoverflow.com - 13506460](http://stackoverflow.com/questions/13506460/how-to-extract-the-host-from-a-url-in-javascript/13506482#13506482)\n",
  "repository": {
    "type": "git",
    "url": "git://github.com/reggi/schemejs.git"
  },
  "version": "0.0.1"
}
